name: Ci-Deploy

on:
  pull_request:
    branches: [ "master" ]

env:
  AWS_REGION: eu-west-3

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          cache-all-crates: true

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        run: npm ci
        working-directory: gmt-web-app
      
      - name: Install cdk
        run : npm install -g aws-cdk

      - name: Build rust projects
        run: cargo build --release

      - name: Make sdk
        run: npm run make-sdk
        working-directory: gmt-web-app
      
      - name: Build front
        run: npm run build
        working-directory: gmt-web-app
        
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::446114629971:role/GithubActionRole
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Install cdk dependencies
        run: npm install
        working-directory: gmt-cdk

      - name: Deploy
        run: cdk deploy GmtCdkStack-ci-${{ github.event.pull_request.number }} --require-approval never
        working-directory: gmt-cdk
        env:
          GH_PULL_ID: ${{ github.event.pull_request.number }}

      - name: Bundle back-end application
        run: |
          mkdir -p dist
          cp target/release/gmt-server dist/gmt-server
          cp target/release/gmt-api dist/gmt-api
          cp -r app-spec dist
          cp app-spec/appspec.yml dist
          cd dist
          zip -r app.zip .

      - name: Upload application to S3
        run: aws s3 cp dist/app.zip s3://gmt-pull-ci-artefacts-bucket-${{ github.event.pull_request.number }}/app.zip

      - name: Retrieve distribution domain name
        id: retrieve_domain
        run: |
          echo "domain_name=$(aws cloudformation describe-stacks --stack-name GmtCdkStack-ci-${{ github.event.pull_request.number }} --query "Stacks[0].Outputs[?OutputKey=='DistributionDomainName'].OutputValue" --output text)" >> $GITHUB_OUTPUT

      - name: Retrieve instance id
        id: retrieve_instance_id
        run: |
          echo "instance_id=$(aws cloudformation describe-stacks --stack-name GmtCdkStack-ci-${{ github.event.pull_request.number }} --query "Stacks[0].Outputs[?OutputKey=='InstanceId'].OutputValue" --output text)" >> $GITHUB_OUTPUT

      - name: Start instance
        run: aws ec2 start-instances --instance-ids ${{ steps.retrieve_instance_id.outputs.instance_id }}

      - name: Deploy application to CodeDeploy
        run: aws deploy create-deployment
          --application-name gmt-pull-${{ github.event.pull_request.number }}-api-application 
          --deployment-group-name gmt-pull-${{ github.event.pull_request.number }}-api-deployment-group
          --s3-location bucket=gmt-pull-ci-artefacts-bucket-${{ github.event.pull_request.number }},key=app.zip,bundleType=zip
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --description "Deploying app from PR ${{ github.event.pull_request.number }}"

      - name: Post comment
        uses: KeisukeYamashita/create-comment@v1
        continue-on-error: true
        with:
          check-only-first-line: "true"
          comment: |
            Deployment successful.

            You can access the application at [https://${{ steps.retrieve_domain.outputs.domain_name }}/](https://${{ steps.retrieve_domain.outputs.domain_name }}/)